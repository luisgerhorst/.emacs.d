(1
 (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." tar])
 (adaptive-wrap . [(0 7) nil "Smart lineprefix" tar])
 (ag . [(0 48) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." tar])
 (aggressive-indent . [(1 9 0) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" tar])
 (alert . [(1 3) ((gntp (0 1)) (log4e (0 3 0)) (cl-lib (0 5))) "Growl-style notification system for Emacs" tar])
 (anaconda-mode . [(0 1 12) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" tar])
 (apache-mode . [(2 2 0) nil "Major mode for editing Apache httpd configuration files" tar])
 (async . [(1 9 3) nil "Asynchronous processing in Emacs" tar])
 (auctex . [(12 2 0) ((emacs (24 1)) (cl-lib (0 5))) "Integrated environment for *TeX*" tar])
 (auto-compile . [(1 5 1) ((emacs (25 1)) (packed (3 0 0))) "automatically compile Emacs Lisp libraries" tar])
 (auto-complete . [(1 5 1) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar])
 (avy . [(0 5 0) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." tar])
 (bind-key . [(2 4) nil "A simple way to manage personal keybindings" tar])
 (company . [(0 9 10) ((emacs (24 3))) "Modular text completion framework" tar])
 (company-auctex . [(20180725 1912) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Companycompletion for AUCTeX" tar])
 (company-c-headers . [(20190825 1631) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" tar])
 (company-irony . [(1 1 0) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "companymode" tar])
 (company-jedi . [(0 4) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "companyend for Python JEDI" tar])
 (company-quickhelp . [(2 3 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" tar])
 (crm-custom . [(0 5) ((cl-lib (0 5))) "Alternate `completingread'" tar])
 (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" tar])
 (dash . [(2 16 0) nil "A modern list library for Emacs" tar])
 (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" tar])
 (delight . [(1 5) ((cl-lib (0 5)) (nadvice (0 3))) "A dimmer switch for your lighter text" tar])
 (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" tar])
 (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" tar])
 (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" tar])
 (dsvn . [(20190316 2201) nil "Subversion interface" tar])
 (dumb-jump . [(20191128 1910) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "Jump to definition for 40+ languages without configuration" tar])
 (ensime . [(2 0 2) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar])
 (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" tar])
 (esh-autosuggest . [(2 0 1) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" tar])
 (ess . [(18 10 2) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar])
 (exec-path-from-shell . [(20191229 112) nil "Get environment variables such as $PATH from the shell" tar])
 (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar])
 (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" tar])
 (fic-mode . [(20180603 2035) nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" tar])
 (fillcode . [(20171029 1625) nil "Fill (wrap) function calls and expressions in source code" tar])
 (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" tar])
 (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" tar])
 (flycheck . [(31) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "Onfly syntax checking" tar])
 (flycheck-irony . [(0 1 0) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" tar])
 (flycheck-julia . [(0 1 1) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" tar])
 (frame-restore . [(0 5) ((emacs (24 1))) "Restore Emacs frame" tar])
 (fzf . [(0 2) ((emacs (24 4))) "A front-end for fzf." tar])
 (ghub . [(3 2 0) ((emacs (25 1)) (dash (2 14 1)) (graphql (0 1 1)) (let-alist (1 0 5)) (treepy (0 1 1))) "Minuscule client libraries for Git forge APIs." tar])
 (git-commit . [(2 90 1) ((emacs (25 1)) (dash (2 14 1)) (with-editor (2 8 0))) "Edit Git commit messages" tar])
 (git-timemachine . [(4 11) ((emacs (24 3)) (transient (0 1 0))) "Walk through git revisions of a file" tar])
 (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" tar])
 (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" tar])
 (graphql . [(0 1 1) ((emacs (25))) "GraphQL utilities" tar])
 (groovy-mode . [(2 0) ((s (1 12 0)) (emacs (24 3))) "Major mode for Groovy source files" tar])
 (ht . [(2 2) ((dash (2 12 0))) "The missing hash table library for Emacs" tar])
 (hydra . [(0 15 0) ((cl-lib (0 5)) (lv (0))) "Make bindings that stick around." tar])
 (ido-completing-read+ . [(4 13) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completingfunction using ido" tar])
 (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." tar])
 (iedit . [(0 9 9 9) nil "Edit multiple regions in the same way simultaneously." tar])
 (irony . [(1 4 0) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar])
 (jedi-core . [(0 2 8) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar])
 (julia-mode . [(20191128 1452) nil "Major mode for editing Julia source code" tar])
 (log4e . [(0 3 0) nil "provide logging framework for elisp" tar])
 (lua-mode . [(20151025) nil "a major-mode for editing Lua scripts" tar])
 (lv . [(0 15 0) nil "Other echo area" tar])
 (magit . [(2 90 1) ((emacs (25 1)) (async (1 9 3)) (dash (2 14 1)) (ghub (3 0 0)) (git-commit (2 90 0)) (magit-popup (2 12 4)) (with-editor (2 8 0))) "A Git porcelain inside Emacs." tar])
 (magit-popup . [(2 13 0) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (magit-svn . [(2 2 1) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" tar])
 (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" tar])
 (markdown-mode . [(2 3) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" tar])
 (meghanada . [(1 2 0) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar])
 (memoize . [(1 1) nil "Memoization functions" tar])
 (mips-mode . [(1 1 1) nil "Major-mode for MIPS assembly" tar])
 (mu4e-alert . [(1 0) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" tar])
 (nadvice . [(0 3) nil "Forward compatibility for Emacs-24.4's nadvice" tar])
 (nasm-mode . [(1 1 1) ((emacs (24 3))) "NASM x86 assembly major mode" tar])
 (packed . [(3 0 0) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" tar])
 (paradox . [(2 5 4) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar])
 (paredit . [(24) nil "minor mode for editing parentheses" tar])
 (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" tar])
 (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" tar])
 (pos-tip . [(0 4 6) nil "Show tooltip at point" tar])
 (projectile . [(2 0 0) ((emacs (25 1)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" tar])
 (pythonic . [(0 1 1) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." tar])
 (reveal-in-osx-finder . [(0 3 3) nil "Reveal file associated with buffer in OS X Finder" tar])
 (rust-mode . [(0 4 0) ((emacs (24 0))) "A major emacs mode for editing Rust source code" tar])
 (s . [(1 12 0) nil "The long lost Emacs string manipulation library." tar])
 (sbt-mode . [(2 0 0) ((emacs (24 4))) "Interactive support for sbt projects" tar])
 (scala-mode . [(1 0 0) nil "Major mode for editing Scala" tar])
 (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" tar])
 (smex . [(3 0) nil "Mstyle fuzzy matching." tar])
 (spinner . [(1 7 3) nil "Add spinners and progressline for ongoing operations" tar])
 (swift-mode . [(8 0 1) ((emacs (24 4)) (seq (2 3))) "Major-mode for Apple's Swift programming language." tar])
 (transient . [(0 1 0) ((emacs (25 1)) (dash (2 15 0)) (lv (0 14 0))) "Transient commands" tar])
 (treepy . [(0 1 1) ((emacs (25 1))) "Generic tree traversal tools" tar])
 (use-package . [(2 4) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (visual-fill-column . [(1 11) ((emacs (24 3))) "fillmode" tar])
 (which-key . [(3 3 1) ((emacs (24 4))) "Display available keybindings in popup" tar])
 (whole-line-or-region . [(1 3 1) nil "operate on current line if region undefined" tar])
 (with-editor . [(2 8 3) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar])
 (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." tar])
 (xcscope . [(1 5) nil "cscope interface for (X)Emacs" tar])
 (yaml-mode . [(0 0 14) ((emacs (24 1))) "Major mode for editing YAML files" tar])
 (yasnippet . [(0 13 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar])
 (xterm-color . [(20200103 1327) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" tar])
 (cargo . [(0 4 1) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar])
 (dash-functional . [(20191109 1327) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" tar])
 (lsp-mode . [(20200106 919) ((emacs (25 1)) (dash (2 14 1)) (dash-functional (2 14 1)) (f (0 20 0)) (ht (2 0)) (spinner (1 7 3)) (markdown-mode (2 3)) (lv (0))) "LSP mode" tar])
 (company-lsp . [(2 1 0) ((emacs (25 1)) (lsp-mode (6 0)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." tar])
 (lsp-ui . [(6 0) ((emacs (25 1)) (dash (2 14)) (dash-functional (1 2 0)) (lsp-mode (6 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar])
)